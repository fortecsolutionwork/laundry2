import React__default, { memo, createElement } from 'react';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var MONTHS = {
  0: 'January',
  1: 'February',
  2: 'March',
  3: 'April',
  4: 'May',
  5: 'June',
  6: 'July',
  7: 'August',
  8: 'September',
  9: 'October',
  10: 'November',
  11: 'December'
};
var getMonthNameFromNumber = function getMonthNameFromNumber(month) {
  if (month < 0 || month > 11) {
    throw new Error("Invalid month number: " + month);
  }

  return MONTHS[month];
};
var getDatesOfMonth = function getDatesOfMonth(date) {
  // generate dates of each week of the month including the residue dates
  // of the last week of previous month and first week of next month
  var firstDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);
  var lastDayOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0);
  var firstDayOfMonthWeekDay = firstDayOfMonth.getDay();
  var lastDayOfMonthWeekDay = lastDayOfMonth.getDay();
  var previousMonth = new Date(date.getFullYear(), date.getMonth(), 0);
  var previousMonthLastDay = new Date(previousMonth.getFullYear(), previousMonth.getMonth() + 1, 0);
  var nextMonth = new Date(date.getFullYear(), date.getMonth() + 2, 0);
  var dates = [];

  for (var i = 0; i < firstDayOfMonthWeekDay; i++) {
    dates.push({
      d: new Date(previousMonth.getFullYear(), previousMonth.getMonth(), previousMonthLastDay.getDate() - firstDayOfMonthWeekDay + i + 1),
      active: false
    });
  }

  for (var _i = 0; _i < lastDayOfMonth.getDate(); _i++) {
    dates.push({
      d: new Date(date.getFullYear(), date.getMonth(), _i + 1),
      active: true
    });
  }

  for (var _i2 = 0; _i2 < 6 - lastDayOfMonthWeekDay; _i2++) {
    dates.push({
      d: new Date(nextMonth.getFullYear(), nextMonth.getMonth(), _i2 + 1),
      active: false
    });
  }

  return dates;
};

var MonthPicker = function MonthPicker(_ref) {
  var month = _ref.month,
      year = _ref.year,
      nextMonth = _ref.nextMonth,
      prevMonth = _ref.prevMonth;
  return React__default.createElement("div", {
    className: "sdp--month-picker"
  }, React__default.createElement("button", {
    className: "sdp--square-btn sdp--square-btn__shadowed",
    onClick: prevMonth,
    "aria-label": "Go to previous month",
    type: "button"
  }, React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "24",
    height: "24",
    fill: "currentColor",
    viewBox: "0 0 256 256"
  }, React__default.createElement("rect", {
    width: "256",
    height: "256",
    fill: "none"
  }), React__default.createElement("polyline", {
    points: "160 208 80 128 160 48",
    fill: "none",
    stroke: "currentColor",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: "24"
  }))), React__default.createElement("p", {
    className: "sdp--text sdp--month-name",
    "aria-label": getMonthNameFromNumber(month) + " " + year + " is currently open in Date Picker",
    tabIndex: 0
  }, getMonthNameFromNumber(month), " ", year), React__default.createElement("button", {
    className: "sdp--square-btn sdp--square-btn__shadowed",
    onClick: nextMonth,
    "aria-label": "Go to next month",
    type: "button"
  }, React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "24",
    height: "24",
    fill: "currentColor",
    viewBox: "0 0 256 256"
  }, React__default.createElement("rect", {
    width: "256",
    height: "256",
    fill: "none"
  }), React__default.createElement("polyline", {
    points: "96 48 176 128 96 208",
    fill: "none",
    stroke: "currentColor",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: "24"
  }))));
};

var dateOptions = {
  weekday: 'long',
  month: 'long',
  day: 'numeric',
  year: 'numeric'
};

var DateButton = function DateButton(_ref) {
  var date = _ref.date,
      active = _ref.active,
      _onClick = _ref.onClick,
      selected = _ref.selected;
  return createElement("button", {
    className: "sdp--square-btn sdp--date-btn " + (selected ? 'sdp--date-btn__selected' : '') + " sdp--text " + (!active ? 'sdp--text__inactive' : ''),
    onClick: function onClick() {
      return _onClick(date);
    },
    tabIndex: active ? 0 : -1,
    "aria-label": (selected ? 'Currently selected' : 'Select') + " " + date.toLocaleDateString('en-US', dateOptions),
    type: "button"
  }, date.getDate());
};

var DateButton$1 = /*#__PURE__*/memo(DateButton, function (p, n) {
  return p.date.getDay() === n.date.getDay() && p.active === n.active && p.selected === n.selected;
});

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = ".sdp{background-color:#fff;border:none;border-radius:.5rem;box-shadow:var(--shadow);padding:.75rem;width:16rem}.sdp--month-name:focus,.sdp--square-btn:focus,.sdp:focus{box-shadow:0 0 0 2px #60a5fab3;outline:none}.sdp--month-name{border:none;border-radius:.5rem;padding:.5rem}.sdp--text{font-family:var(--font);font-weight:500;margin:0}.sdp--text__inactive{color:var(--disabled-color);pointer-events:none}.sdp--square-btn{align-items:center;background-color:#fff;border:none;border-radius:.5rem;cursor:pointer;display:flex;font-family:var(--font);height:1.8rem;justify-content:center;transition:all .2s ease-in-out;width:1.8rem}.sdp--square-btn:focus:hover{box-shadow:none}.sdp--square-btn__shadowed,.sdp--square-btn__shadowed:focus:hover{box-shadow:var(--shadow)}.sdp--date-btn__selected{background-color:var(--theme-color);box-shadow:var(--shadow);color:var(--selected-date-color)}.sdp--date-btn__selected.sdp--square-btn:focus{box-shadow:var(--shadow)}.sdp--month-picker{align-items:center;display:flex;justify-content:space-between}.sdp--dates-grid{display:grid;gap:4px;grid-template-columns:repeat(7,1fr);justify-items:center;margin:.5rem 0 0}.sdp--dates-grid>p.sdp--text{padding:.5rem 0}";
styleInject(css_248z);

var _excluded = ["onChange", "selected", "minDate", "maxDate", "className"];
var DatePicker = /*#__PURE__*/React__default.forwardRef(function (_ref, ref) {
  var _process, _process$env;

  var onChange = _ref.onChange,
      _ref$selected = _ref.selected,
      selected = _ref$selected === void 0 ? new Date() : _ref$selected,
      _ref$minDate = _ref.minDate,
      minDate = _ref$minDate === void 0 ? new Date(1900, 0, 1) : _ref$minDate,
      maxDate = _ref.maxDate,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded);

  var minDateVal = minDate.getTime();
  var maxDateVal = typeof maxDate === 'undefined' ? Number.POSITIVE_INFINITY : maxDate.getTime();

  var _React$useState = React__default.useState(selected),
      monthDate = _React$useState[0],
      setMonthDate = _React$useState[1];

  var _React$useState2 = React__default.useState(selected),
      selectedDate = _React$useState2[0],
      setSelectedDate = _React$useState2[1];

  var nextMonth = React__default.useCallback(function () {
    return setMonthDate(function (d) {
      var m = d.getMonth();
      var y = d.getFullYear();

      if (m === 11) {
        return new Date(y + 1, 0);
      } else {
        return new Date(y, m + 1);
      }
    });
  }, []);
  var prevMonth = React__default.useCallback(function () {
    return setMonthDate(function (d) {
      var m = d.getMonth();
      var y = d.getFullYear();

      if (m === 0) {
        return new Date(y - 1, 11);
      } else {
        return new Date(y, m - 1);
      }
    });
  }, []);
  var setNewSelectedDate = React__default.useCallback(function (date) {
    setSelectedDate(date);
    onChange == null ? void 0 : onChange(date);
  }, [onChange, setSelectedDate]);

  if (((_process = process) == null ? void 0 : (_process$env = _process.env) == null ? void 0 : _process$env.NODE_ENV) !== 'production' && (selected.getTime() > maxDateVal || selected.getTime() < minDateVal)) {
    console.warn('DatePicker: Selected date must fall in the range of maxDate and minDate');
  } // TODO: arrow-keys navigation


  return React__default.createElement("div", Object.assign({
    className: "sdp " + (className != null ? className : ''),
    "aria-label": "Date Picker",
    tabIndex: 0,
    ref: ref
  }, props), React__default.createElement(MonthPicker, {
    month: monthDate.getMonth(),
    year: monthDate.getFullYear(),
    nextMonth: nextMonth,
    prevMonth: prevMonth
  }), React__default.createElement("div", {
    className: "sdp--dates-grid"
  }, React__default.createElement("p", {
    className: "sdp--text sdp--text__inactive"
  }, "Su"), React__default.createElement("p", {
    className: "sdp--text sdp--text__inactive"
  }, "Mo"), React__default.createElement("p", {
    className: "sdp--text sdp--text__inactive"
  }, "Tu"), React__default.createElement("p", {
    className: "sdp--text sdp--text__inactive"
  }, "We"), React__default.createElement("p", {
    className: "sdp--text sdp--text__inactive"
  }, "Th"), React__default.createElement("p", {
    className: "sdp--text sdp--text__inactive"
  }, "Fr"), React__default.createElement("p", {
    className: "sdp--text sdp--text__inactive"
  }, "Sa"), getDatesOfMonth(monthDate).map(function (_ref2) {
    var d = _ref2.d,
        active = _ref2.active;
    var dVal = d.getTime();
    return React__default.createElement(DateButton$1, {
      key: dVal,
      date: d,
      active: dVal >= minDateVal && dVal <= maxDateVal && active,
      selected: selectedDate.toDateString() === d.toDateString(),
      onClick: setNewSelectedDate
    });
  })));
});
DatePicker.displayName = 'DatePicker';

var css_248z$1 = ".sdp,.stp{--font:inherit,-apple-system,\"Segoe UI\",Ubuntu,\"Helvetica Neue\",sans-serif;--shadow:transparent 0px 0px 0px 0px,transparent 0px 0px 0px 0px,rgba(0,0,0,.1) 0px 1px 3px 0px,rgba(0,0,0,.06) 0px 1px 2px 0px;--shadow-md:transparent 0px 0px 0px 0px,transparent 0px 0px 0px 0px,rgba(0,0,0,.1) 0px 4px 6px -1px,rgba(0,0,0,.06) 0px 2px 4px -1px;--theme-color:#60a5fa;--selected-date-color:#fff;--disabled-color:#bdbdbd}";
styleInject(css_248z$1);

/**
 * Custom Option component.
 */

var CustomOption = function CustomOption(_ref) {
  var selected = _ref.selected,
      value = _ref.value,
      label = _ref.label,
      _onClick = _ref.onClick,
      disabled = _ref.disabled;
  var ref = React__default.useRef(null);
  React__default.useEffect(function () {
    if (selected) {
      var _ref$current;

      (_ref$current = ref.current) == null ? void 0 : _ref$current.scrollIntoView();
    }
  }, [selected]);
  return React__default.createElement("button", {
    ref: ref,
    className: "stp--option " + (selected ? 'stp--option__active' : '') + " " + (disabled ? 'stp--option__disabled' : ''),
    type: "button",
    onClick: function onClick() {
      return !disabled && _onClick(value);
    },
    key: value
  }, label);
};

/**
 * A custom select component.
 *
 */

var CustomSelect = function CustomSelect(_ref) {
  var value = _ref.value,
      options = _ref.options,
      onChange = _ref.onChange,
      children = _ref.children;
  var ref = React__default.useRef(null);

  var _React$useState = React__default.useState(false),
      isOpen = _React$useState[0],
      setIsOpen = _React$useState[1];

  var openOptionsDropdown = React__default.useCallback(function () {
    setIsOpen(true);
  }, []);
  var closeOptionsDropdown = React__default.useCallback(function () {
    setIsOpen(false);
  }, []);
  var handleOptionSelect = React__default.useCallback(function (v) {
    onChange(v);
    closeOptionsDropdown();
  }, [onChange, closeOptionsDropdown]);
  React__default.useEffect(function () {
    if (React__default.Children.toArray(children).some(function (c) {
      return typeof c !== 'string';
    })) {
      throw new Error('time-picker: CustomSelect children must be strings');
    }
  }, [children]);
  React__default.useEffect(function () {
    var clickListener = function clickListener(e) {
      var _ref$current;

      if (!((_ref$current = ref.current) != null && _ref$current.contains(e.target))) {
        closeOptionsDropdown();
      }
    };

    document.addEventListener('click', clickListener);
    return function () {
      return document.removeEventListener('click', clickListener);
    };
  }, [closeOptionsDropdown]);
  return React__default.createElement("div", {
    className: "stp--select__container"
  }, React__default.createElement("div", {
    ref: ref,
    className: "stp--select",
    tabIndex: 0,
    onClick: openOptionsDropdown,
    onFocus: openOptionsDropdown
  }, value), isOpen && React__default.createElement("div", {
    className: "stp--select__dropdown"
  }, options.map(function (_ref2) {
    var _ref2$value = _ref2.value,
        v = _ref2$value[0],
        label = _ref2$value[1],
        disabled = _ref2.disabled;
    return React__default.createElement(CustomOption, {
      key: v,
      selected: v === value,
      value: v,
      label: label,
      onClick: handleOptionSelect,
      disabled: disabled
    });
  })));
};

var css_248z$2 = ".stp{border:none;border-radius:.5rem;box-shadow:var(--shadow);display:inline-flex;font-family:var(--font);padding:.5rem}.stp,.stp *{outline:none}.stp:focus,.stp :focus{box-shadow:0 0 0 2px #60a5fab3}.stp>p{display:inline;margin:0 4px}.stp--select{border:none;border-radius:.25rem;display:inline;padding:.1rem .4rem}.stp--select__container{position:relative}.stp--select__dropdown{background-color:#fff;border:none;border-radius:.5rem;box-shadow:var(--shadow);display:flex;flex-direction:column;max-height:30vh;overflow:auto;padding:.4rem;position:absolute;scrollbar-width:none;z-index:2}.stp--select__dropdown::-webkit-scrollbar{display:none}.stp--option,.stp--select{font-family:var(--font);font-size:1rem;font-weight:500}.stp--option__disabled{color:var(--disabled-color);pointer-events:none}.stp--select:hover{cursor:context-menu}.stp--option{background-color:#fff;border:none;border-radius:.25rem;cursor:pointer;margin-top:.25rem;padding:.25rem .4rem;transition:all .1s ease}.stp--option:first-of-type{margin-top:0}.stp--option:hover,.stp--option__active{background-color:var(--theme-color);color:var(--selected-date-color)}.stp--option__active{box-shadow:var(--shadow)}";
styleInject(css_248z$2);

var _excluded$1 = ["onChange", "selected", "minTime", "maxTime", "minutesInterval", "className"];
/**
 *
 * @param time {Time} The time value
 * @param interval {number} The interval between each minute select option
 * @returns {Time} Time value rounded to the nearest interval
 */

var alignTime = function alignTime(_ref, interval, lower) {
  var hours = _ref.hours,
      minutes = _ref.minutes;

  if (lower === void 0) {
    lower = true;
  }

  // round minutes to nearest interval
  if (minutes % interval !== 0) {
    minutes = lower ? minutes - minutes % interval : minutes + minutes % interval;
  }

  return {
    hours: hours,
    minutes: minutes
  };
};
/**
 * Compares two time values and returns true if a is greater than b
 *
 * @param {Time} Time value a
 * @param {Time} Time value b
 * @returns {boolean} If a is greater than b
 */


var greaterThan = function greaterThan(a, b) {
  if (a.hours !== b.hours) {
    return a.hours > b.hours;
  }

  return a.minutes > b.minutes;
};

var isMinuteOptionDisabled = function isMinuteOptionDisabled(selectedTime, maxTime, minTime, i) {
  return selectedTime.hours > maxTime.hours || selectedTime.hours < minTime.hours || selectedTime.hours === maxTime.hours && i > maxTime.minutes || selectedTime.hours === minTime.hours && i < minTime.minutes;
}; // sane defaults


var MIN_TIME = {
  hours: 0,
  minutes: 0
};
var MAX_TIME = {
  hours: 23,
  minutes: 59
};
var MINUTES_INTERVAL = 30;
/**
 * TimePicker React Component
 */

var TimePicker = /*#__PURE__*/React__default.forwardRef(function (_ref2, ref) {
  var _process, _process$env;

  var onChange = _ref2.onChange,
      selected = _ref2.selected,
      _ref2$minTime = _ref2.minTime,
      minTime = _ref2$minTime === void 0 ? MIN_TIME : _ref2$minTime,
      _ref2$maxTime = _ref2.maxTime,
      maxTime = _ref2$maxTime === void 0 ? MAX_TIME : _ref2$maxTime,
      _ref2$minutesInterval = _ref2.minutesInterval,
      minutesInterval = _ref2$minutesInterval === void 0 ? MINUTES_INTERVAL : _ref2$minutesInterval,
      className = _ref2.className,
      props = _objectWithoutPropertiesLoose(_ref2, _excluded$1);

  if (typeof minutesInterval !== 'number' && minutesInterval < 1 && Number.isInteger(minutesInterval)) {
    throw new Error('minutesInterval must be an integer greater than 0');
  }

  if (process.env.NODE_ENV !== 'production' && 60 % minutesInterval !== 0) {
    console.warn('TimePicker: minutesInterval is not a factor of 60');
  }

  var _React$useState = React__default.useState(function () {
    if (selected !== undefined) {
      return alignTime(selected, minutesInterval);
    }

    var d = new Date();
    return alignTime({
      hours: d.getHours(),
      minutes: d.getMinutes()
    }, minutesInterval);
  }),
      selectedTime = _React$useState[0],
      setSelectedTime = _React$useState[1];

  var handleMinutesChange = React__default.useCallback(function (v) {
    setSelectedTime(function (t) {
      if (t.hours === maxTime.hours && Number(v) > maxTime.minutes) {
        return alignTime(_extends({}, t, {
          minutes: maxTime.minutes
        }), minutesInterval);
      } else if (t.hours === minTime.hours && Number(v) < minTime.minutes) {
        return alignTime(_extends({}, t, {
          minutes: minTime.minutes
        }), minutesInterval, false);
      } else {
        return alignTime(_extends({}, t, {
          minutes: Number(v)
        }), minutesInterval);
      }
    });
  }, [minutesInterval, maxTime, minTime]);
  var handleHoursChange = React__default.useCallback(function (v) {
    setSelectedTime(function (t) {
      var h = Number(v);

      if (h === minTime.hours && t.minutes < minTime.minutes) {
        return alignTime({
          hours: h,
          minutes: minTime.minutes
        }, minutesInterval, false);
      } else if (h === maxTime.hours && t.minutes > maxTime.minutes) {
        return alignTime({
          hours: h,
          minutes: maxTime.minutes
        }, minutesInterval);
      } else {
        return alignTime(_extends({}, t, {
          hours: h
        }), minutesInterval);
      }
    });
  }, [minutesInterval, maxTime, minTime]); // the array of options for the minutes to select from

  var minuteOptions = React__default.useMemo(function () {
    var options = [];

    for (var i = 0; i < 60; i += minutesInterval) {
      options.push({
        value: [i.toString(), i.toString().padStart(2, '0')],
        disabled: isMinuteOptionDisabled(selectedTime, maxTime, minTime, i)
      });
    }

    return options; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [minutesInterval, maxTime, minTime, selectedTime.hours]);
  var hourOptions = React__default.useMemo(function () {
    var options = [];

    for (var i = 0; i <= 23; i++) {
      options.push({
        value: [i.toString(), i.toString().padStart(2, '0')],
        disabled: minTime.hours > i || maxTime.hours < i
      });
    }

    return options;
  }, [maxTime, minTime]);
  React__default.useEffect(function () {
    onChange == null ? void 0 : onChange(selectedTime);
  }, [selectedTime, onChange]);
  React__default.useEffect(function () {
    var updatedTime = alignTime(selectedTime, minutesInterval);
    setSelectedTime(updatedTime);
    onChange == null ? void 0 : onChange(updatedTime); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [minutesInterval]);

  if (((_process = process) == null ? void 0 : (_process$env = _process.env) == null ? void 0 : _process$env.NODE_ENV) !== 'production' && (greaterThan(selectedTime, maxTime) || greaterThan(minTime, selectedTime))) {
    console.warn('TimePicker: Selected time must fall in the range of maxTime and minTime');
  }

  return React__default.createElement("div", Object.assign({
    className: "stp " + (className != null ? className : '')
  }, props, {
    ref: ref
  }), React__default.createElement(CustomSelect, {
    className: "stp--select stp--select__hours",
    value: selectedTime.hours.toString().padStart(2, '0'),
    onChange: handleHoursChange,
    options: hourOptions
  }), React__default.createElement("p", null, ":"), React__default.createElement(CustomSelect, {
    className: "stp--select stp--select__minutes",
    value: selectedTime.minutes.toString().padStart(2, '0'),
    onChange: handleMinutesChange,
    options: minuteOptions
  }));
});
TimePicker.displayName = 'TimePicker';

export default DatePicker;
export { TimePicker };
//# sourceMappingURL=sassy-datepicker.esm.js.map
