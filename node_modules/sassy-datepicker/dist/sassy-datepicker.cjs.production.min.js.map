{"version":3,"file":"sassy-datepicker.cjs.production.min.js","sources":["../src/util.ts","../src/date-picker/month-picker.tsx","../src/date-picker/date-button.tsx","../node_modules/style-inject/dist/style-inject.es.js","../src/date-picker/index.tsx","../src/time-picker/custom-option.tsx","../src/time-picker/custom-select.tsx","../src/time-picker/index.tsx"],"sourcesContent":["const MONTHS: { [key: number]: string } = {\n  0: 'January',\n  1: 'February',\n  2: 'March',\n  3: 'April',\n  4: 'May',\n  5: 'June',\n  6: 'July',\n  7: 'August',\n  8: 'September',\n  9: 'October',\n  10: 'November',\n  11: 'December',\n};\n\nexport const getMonthNameFromNumber = (month: number): string => {\n  if (month < 0 || month > 11) {\n    throw new Error(`Invalid month number: ${month}`);\n  }\n  return MONTHS[month];\n};\n\nexport const getDatesOfMonth = (date: Date): { d: Date; active: boolean }[] => {\n  // generate dates of each week of the month including the residue dates\n  // of the last week of previous month and first week of next month\n  const firstDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);\n  const lastDayOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n\n  const firstDayOfMonthWeekDay = firstDayOfMonth.getDay();\n  const lastDayOfMonthWeekDay = lastDayOfMonth.getDay();\n\n  const previousMonth = new Date(date.getFullYear(), date.getMonth(), 0);\n  const previousMonthLastDay = new Date(\n    previousMonth.getFullYear(),\n    previousMonth.getMonth() + 1,\n    0\n  );\n\n  const nextMonth = new Date(date.getFullYear(), date.getMonth() + 2, 0);\n\n  const dates: { d: Date; active: boolean }[] = [];\n\n  for (let i = 0; i < firstDayOfMonthWeekDay; i++) {\n    dates.push({\n      d: new Date(\n        previousMonth.getFullYear(),\n        previousMonth.getMonth(),\n        previousMonthLastDay.getDate() - firstDayOfMonthWeekDay + i + 1\n      ),\n      active: false,\n    });\n  }\n\n  for (let i = 0; i < lastDayOfMonth.getDate(); i++) {\n    dates.push({\n      d: new Date(date.getFullYear(), date.getMonth(), i + 1),\n      active: true,\n    });\n  }\n\n  for (let i = 0; i < 6 - lastDayOfMonthWeekDay; i++) {\n    dates.push({\n      d: new Date(nextMonth.getFullYear(), nextMonth.getMonth(), i + 1),\n      active: false,\n    });\n  }\n\n  return dates;\n};\n","import React from 'react';\nimport { getMonthNameFromNumber } from '../util';\n\nexport type MonthPickerProps = {\n  month: number;\n  year: number;\n  nextMonth: () => void;\n  prevMonth: () => void;\n};\n\nconst MonthPicker: React.FC<MonthPickerProps> = ({\n  month,\n  year,\n  nextMonth,\n  prevMonth,\n}) => {\n  return (\n    <div className=\"sdp--month-picker\">\n      <button\n        className=\"sdp--square-btn sdp--square-btn__shadowed\"\n        onClick={prevMonth}\n        aria-label=\"Go to previous month\"\n        type=\"button\"\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"24\"\n          height=\"24\"\n          fill=\"currentColor\"\n          viewBox=\"0 0 256 256\"\n        >\n          <rect width=\"256\" height=\"256\" fill=\"none\"></rect>\n          <polyline\n            points=\"160 208 80 128 160 48\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"24\"\n          ></polyline>\n        </svg>\n      </button>\n      <p\n        className=\"sdp--text sdp--month-name\"\n        aria-label={`${getMonthNameFromNumber(\n          month\n        )} ${year} is currently open in Date Picker`}\n        tabIndex={0}\n      >\n        {getMonthNameFromNumber(month)} {year}\n      </p>\n      <button\n        className=\"sdp--square-btn sdp--square-btn__shadowed\"\n        onClick={nextMonth}\n        aria-label=\"Go to next month\"\n        type=\"button\"\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"24\"\n          height=\"24\"\n          fill=\"currentColor\"\n          viewBox=\"0 0 256 256\"\n        >\n          <rect width=\"256\" height=\"256\" fill=\"none\"></rect>\n          <polyline\n            points=\"96 48 176 128 96 208\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"24\"\n          ></polyline>\n        </svg>\n      </button>\n    </div>\n  );\n};\n\nexport default MonthPicker;\n","import * as React from 'react';\n\ntype DateButtonProps = {\n  date: Date;\n  active: boolean;\n  selected: boolean;\n  onClick: (date: Date) => void;\n};\n\nconst dateOptions: Intl.DateTimeFormatOptions = {\n  weekday: 'long',\n  month: 'long',\n  day: 'numeric',\n  year: 'numeric',\n};\n\nconst DateButton: React.FC<DateButtonProps> = ({\n  date,\n  active,\n  onClick,\n  selected,\n}) => (\n  <button\n    className={`sdp--square-btn sdp--date-btn ${\n      selected ? 'sdp--date-btn__selected' : ''\n    } sdp--text ${!active ? 'sdp--text__inactive' : ''}`}\n    onClick={() => onClick(date)}\n    tabIndex={active ? 0 : -1}\n    aria-label={`${\n      selected ? 'Currently selected' : 'Select'\n    } ${date.toLocaleDateString('en-US', dateOptions)}`}\n    type=\"button\"\n  >\n    {date.getDate()}\n  </button>\n);\n\nexport default React.memo(\n  DateButton,\n  (p, n) =>\n    p.date.getDay() === n.date.getDay() &&\n    p.active === n.active &&\n    p.selected === n.selected\n);\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React from 'react';\n\nimport MonthPicker from './month-picker';\nimport DateButton from './date-button';\nimport { getDatesOfMonth } from '../util';\n\nimport './styles.css';\n\nexport type DatePickerProps = {\n  /**\n   * This function is called when the selected date is changed.\n   */\n  onChange?: (date: Date) => void;\n  /**\n   * The selected date.\n   */\n  selected?: Date;\n  /**\n   * The minimum date that can be selected (inclusive).\n   */\n  minDate?: Date;\n  /**\n   * The maximum date that can be selected (inclusive).\n   */\n  maxDate?: Date;\n} & React.PropsWithRef<\n  Omit<React.HTMLProps<HTMLDivElement>, 'onChange' | 'selected'>\n>;\n\nconst DatePicker = React.forwardRef<HTMLDivElement, DatePickerProps>(\n  (\n    {\n      onChange,\n      selected = new Date(),\n      minDate = new Date(1900, 0, 1),\n      maxDate,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const minDateVal = minDate.getTime();\n    const maxDateVal =\n      typeof maxDate === 'undefined'\n        ? Number.POSITIVE_INFINITY\n        : maxDate.getTime();\n\n    const [monthDate, setMonthDate] = React.useState<Date>(selected);\n    const [selectedDate, setSelectedDate] = React.useState<Date>(selected);\n\n    const nextMonth = React.useCallback(\n      () =>\n        setMonthDate(d => {\n          const m = d.getMonth();\n          const y = d.getFullYear();\n          if (m === 11) {\n            return new Date(y + 1, 0);\n          } else {\n            return new Date(y, m + 1);\n          }\n        }),\n      []\n    );\n\n    const prevMonth = React.useCallback(\n      () =>\n        setMonthDate(d => {\n          const m = d.getMonth();\n          const y = d.getFullYear();\n          if (m === 0) {\n            return new Date(y - 1, 11);\n          } else {\n            return new Date(y, m - 1);\n          }\n        }),\n      []\n    );\n\n    const setNewSelectedDate = React.useCallback(\n      (date: Date) => {\n        setSelectedDate(date);\n        onChange?.(date);\n      },\n      [onChange, setSelectedDate]\n    );\n\n    if (\n      process?.env?.NODE_ENV !== 'production' &&\n      (selected.getTime() > maxDateVal || selected.getTime() < minDateVal)\n    ) {\n      console.warn(\n        'DatePicker: Selected date must fall in the range of maxDate and minDate'\n      );\n    }\n\n    // TODO: arrow-keys navigation\n    return (\n      <div\n        className={`sdp ${className ?? ''}`}\n        aria-label=\"Date Picker\"\n        tabIndex={0}\n        ref={ref}\n        {...props}\n      >\n        <MonthPicker\n          month={monthDate.getMonth()}\n          year={monthDate.getFullYear()}\n          nextMonth={nextMonth}\n          prevMonth={prevMonth}\n        />\n        <div className=\"sdp--dates-grid\">\n          <p className=\"sdp--text sdp--text__inactive\">Su</p>\n          <p className=\"sdp--text sdp--text__inactive\">Mo</p>\n          <p className=\"sdp--text sdp--text__inactive\">Tu</p>\n          <p className=\"sdp--text sdp--text__inactive\">We</p>\n          <p className=\"sdp--text sdp--text__inactive\">Th</p>\n          <p className=\"sdp--text sdp--text__inactive\">Fr</p>\n          <p className=\"sdp--text sdp--text__inactive\">Sa</p>\n          {getDatesOfMonth(monthDate).map(({ d, active }) => {\n            const dVal = d.getTime();\n\n            return (\n              <DateButton\n                key={dVal}\n                date={d}\n                active={dVal >= minDateVal && dVal <= maxDateVal && active}\n                selected={selectedDate.toDateString() === d.toDateString()}\n                onClick={setNewSelectedDate}\n              />\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n);\n\nDatePicker.displayName = 'DatePicker';\n\nexport default DatePicker;\n","import React from 'react';\n\ntype CustomOptionProps = {\n  /**\n   * If the option is currently selected.\n   */\n  selected: boolean;\n  /**\n   * The label to display for the option.\n   */\n  label: string;\n  /**\n   * The value of the option.\n   */\n  value: string;\n  /**\n   * A callback triggered when the option is clicked.\n   */\n  onClick: (v: string) => void;\n  /**\n   * If the option is disabled.\n   */\n  disabled: boolean;\n};\n\n/**\n * Custom Option component.\n */\nconst CustomOption: React.FC<CustomOptionProps> = ({\n  selected,\n  value,\n  label,\n  onClick,\n  disabled,\n}) => {\n  const ref = React.useRef<HTMLButtonElement>(null);\n\n  React.useEffect(() => {\n    if (selected) {\n      ref.current?.scrollIntoView();\n    }\n  }, [selected]);\n\n  return (\n    <button\n      ref={ref}\n      className={`stp--option ${selected ? 'stp--option__active' : ''} ${\n        disabled ? 'stp--option__disabled' : ''\n      }`}\n      type=\"button\"\n      onClick={() => !disabled && onClick(value)}\n      key={value}\n    >\n      {label}\n    </button>\n  );\n};\n\nexport default CustomOption;\n","import React from 'react';\nimport CustomOption from './custom-option';\n\nexport type OptionType = {\n  value: string[];\n  disabled: boolean;\n};\n\ntype CustomSelectProps = {\n  /**\n   * The value of the select.\n   */\n  value: string;\n  /**\n   * A callback triggered whenever the value of the select changes.\n   */\n  onChange: (value: string) => void;\n  /**\n   * The options to display in the select.\n   *\n   * Format - [{value: [value, label], disabled: boolean}, ...]\n   */\n  options: OptionType[];\n} & Omit<\n  React.PropsWithChildren<React.HTMLProps<HTMLDivElement>>,\n  'onChange' | 'value'\n>;\n\n/**\n * A custom select component.\n *\n */\nconst CustomSelect: React.FC<CustomSelectProps> = ({\n  value,\n  options,\n  onChange,\n  children,\n}) => {\n  const ref = React.useRef<HTMLDivElement>(null);\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\n\n  const openOptionsDropdown = React.useCallback(() => {\n    setIsOpen(true);\n  }, []);\n\n  const closeOptionsDropdown = React.useCallback(() => {\n    setIsOpen(false);\n  }, []);\n\n  const handleOptionSelect = React.useCallback(\n    v => {\n      onChange(v);\n      closeOptionsDropdown();\n    },\n    [onChange, closeOptionsDropdown]\n  );\n\n  React.useEffect(() => {\n    if (React.Children.toArray(children).some(c => typeof c !== 'string')) {\n      throw new Error('time-picker: CustomSelect children must be strings');\n    }\n  }, [children]);\n\n  React.useEffect(() => {\n    const clickListener = (e: MouseEvent) => {\n      if (!ref.current?.contains(e.target as Node)) {\n        closeOptionsDropdown();\n      }\n    };\n\n    document.addEventListener('click', clickListener);\n\n    return () => document.removeEventListener('click', clickListener);\n  }, [closeOptionsDropdown]);\n\n  return (\n    <div className=\"stp--select__container\">\n      <div\n        ref={ref}\n        className=\"stp--select\"\n        tabIndex={0}\n        onClick={openOptionsDropdown}\n        onFocus={openOptionsDropdown}\n      >\n        {value}\n      </div>\n      {isOpen && (\n        <div className=\"stp--select__dropdown\">\n          {options.map(({ value: [v, label], disabled }) => (\n            <CustomOption\n              key={v}\n              selected={v === value}\n              value={v}\n              label={label}\n              onClick={handleOptionSelect}\n              disabled={disabled}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CustomSelect;\n","import React from 'react';\nimport CustomSelect, { OptionType } from './custom-select';\n\nimport './styles.css';\n\n/**\n * Time type\n */\nexport type Time = {\n  hours: number;\n  minutes: number;\n};\n\n/**\n * Props for TimePicker React Component\n */\nexport type TimePickerProps = {\n  /**\n   * This function is called when the selected date is changed.\n   */\n  onChange?: (time: Time) => void;\n  /**\n   * The selected date.\n   */\n  selected?: Time;\n  /**\n   * The minimum time that can be selected - 0 to 23 (inclusive).\n   */\n  minTime?: Time;\n  /**\n   * The maximum time that can be selected - 0 to 23 (inclusive).\n   */\n  maxTime?: Time;\n  /**\n   * The number of minutes between each minute select option - default is 30\n   */\n  minutesInterval?: number;\n} & React.PropsWithRef<\n  Omit<React.HTMLProps<HTMLDivElement>, 'onChange' | 'selected'>\n>;\n\n/**\n *\n * @param time {Time} The time value\n * @param interval {number} The interval between each minute select option\n * @returns {Time} Time value rounded to the nearest interval\n */\nconst alignTime = (\n  { hours, minutes }: Time,\n  interval: number,\n  lower: boolean = true\n): Time => {\n  // round minutes to nearest interval\n  if (minutes % interval !== 0) {\n    minutes = lower\n      ? minutes - (minutes % interval)\n      : minutes + (minutes % interval);\n  }\n  return {\n    hours,\n    minutes,\n  };\n};\n\n/**\n * Compares two time values and returns true if a is greater than b\n *\n * @param {Time} Time value a\n * @param {Time} Time value b\n * @returns {boolean} If a is greater than b\n */\nconst greaterThan = (a: Time, b: Time): boolean => {\n  if (a.hours !== b.hours) {\n    return a.hours > b.hours;\n  }\n  return a.minutes > b.minutes;\n};\n\nconst isMinuteOptionDisabled = (\n  selectedTime: Time,\n  maxTime: Time,\n  minTime: Time,\n  i: number\n) =>\n  selectedTime.hours > maxTime.hours ||\n  selectedTime.hours < minTime.hours ||\n  (selectedTime.hours === maxTime.hours && i > maxTime.minutes) ||\n  (selectedTime.hours === minTime.hours && i < minTime.minutes);\n\n// sane defaults\nconst MIN_TIME = { hours: 0, minutes: 0 };\nconst MAX_TIME = { hours: 23, minutes: 59 };\nconst MINUTES_INTERVAL = 30;\n\n/**\n * TimePicker React Component\n */\nconst TimePicker = React.forwardRef<HTMLDivElement, TimePickerProps>(\n  (\n    {\n      onChange,\n      selected,\n      minTime = MIN_TIME,\n      maxTime = MAX_TIME,\n      minutesInterval = MINUTES_INTERVAL,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    if (\n      typeof minutesInterval !== 'number' &&\n      minutesInterval < 1 &&\n      Number.isInteger(minutesInterval)\n    ) {\n      throw new Error('minutesInterval must be an integer greater than 0');\n    }\n\n    if (process.env.NODE_ENV !== 'production' && 60 % minutesInterval !== 0) {\n      console.warn('TimePicker: minutesInterval is not a factor of 60');\n    }\n\n    const [selectedTime, setSelectedTime] = React.useState(() => {\n      if (selected !== undefined) {\n        return alignTime(selected, minutesInterval);\n      }\n      const d = new Date();\n      return alignTime(\n        { hours: d.getHours(), minutes: d.getMinutes() },\n        minutesInterval\n      );\n    });\n\n    const handleMinutesChange = React.useCallback(\n      (v: string) => {\n        setSelectedTime(t => {\n          if (t.hours === maxTime.hours && Number(v) > maxTime.minutes) {\n            return alignTime(\n              { ...t, minutes: maxTime.minutes },\n              minutesInterval\n            );\n          } else if (t.hours === minTime.hours && Number(v) < minTime.minutes) {\n            return alignTime(\n              { ...t, minutes: minTime.minutes },\n              minutesInterval,\n              false\n            );\n          } else {\n            return alignTime({ ...t, minutes: Number(v) }, minutesInterval);\n          }\n        });\n      },\n      [minutesInterval, maxTime, minTime]\n    );\n\n    const handleHoursChange = React.useCallback(\n      (v: string) => {\n        setSelectedTime(t => {\n          const h = Number(v);\n          if (h === minTime.hours && t.minutes < minTime.minutes) {\n            return alignTime(\n              { hours: h, minutes: minTime.minutes },\n              minutesInterval,\n              false\n            );\n          } else if (h === maxTime.hours && t.minutes > maxTime.minutes) {\n            return alignTime(\n              { hours: h, minutes: maxTime.minutes },\n              minutesInterval\n            );\n          } else {\n            return alignTime({ ...t, hours: h }, minutesInterval);\n          }\n        });\n      },\n      [minutesInterval, maxTime, minTime]\n    );\n\n    // the array of options for the minutes to select from\n    const minuteOptions = React.useMemo<OptionType[]>(() => {\n      let options: OptionType[] = [];\n      for (let i = 0; i < 60; i += minutesInterval) {\n        options.push({\n          value: [i.toString(), i.toString().padStart(2, '0')],\n          disabled: isMinuteOptionDisabled(selectedTime, maxTime, minTime, i),\n        });\n      }\n      return options;\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [minutesInterval, maxTime, minTime, selectedTime.hours]);\n\n    const hourOptions = React.useMemo<OptionType[]>(() => {\n      let options: OptionType[] = [];\n      for (let i = 0; i <= 23; i++) {\n        options.push({\n          value: [i.toString(), i.toString().padStart(2, '0')],\n          disabled: minTime.hours > i || maxTime.hours < i,\n        });\n      }\n      return options;\n    }, [maxTime, minTime]);\n\n    React.useEffect(() => {\n      onChange?.(selectedTime);\n    }, [selectedTime, onChange]);\n\n    React.useEffect(() => {\n      const updatedTime = alignTime(selectedTime, minutesInterval);\n      setSelectedTime(updatedTime);\n      onChange?.(updatedTime);\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [minutesInterval]);\n\n    if (\n      process?.env?.NODE_ENV !== 'production' &&\n      (greaterThan(selectedTime, maxTime) || greaterThan(minTime, selectedTime))\n    ) {\n      console.warn(\n        'TimePicker: Selected time must fall in the range of maxTime and minTime'\n      );\n    }\n\n    return (\n      <div className={`stp ${className ?? ''}`} {...props} ref={ref}>\n        <CustomSelect\n          className=\"stp--select stp--select__hours\"\n          value={selectedTime.hours.toString().padStart(2, '0')}\n          onChange={handleHoursChange}\n          options={hourOptions}\n        />\n        <p>:</p>\n        <CustomSelect\n          className=\"stp--select stp--select__minutes\"\n          value={selectedTime.minutes.toString().padStart(2, '0')}\n          onChange={handleMinutesChange}\n          options={minuteOptions}\n        />\n      </div>\n    );\n  }\n);\n\nTimePicker.displayName = 'TimePicker';\n\nexport default TimePicker;\n"],"names":["MONTHS","getMonthNameFromNumber","month","Error","MonthPicker","year","nextMonth","React","className","onClick","prevMonth","type","xmlns","width","height","fill","viewBox","points","stroke","strokeLinecap","strokeLinejoin","strokeWidth","tabIndex","dateOptions","weekday","day","DateButton","date","active","selected","toLocaleDateString","getDate","p","n","getDay","styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","DatePicker","forwardRef","onChange","Date","minDate","maxDate","props","minDateVal","getTime","maxDateVal","Number","POSITIVE_INFINITY","useState","monthDate","setMonthDate","selectedDate","setSelectedDate","useCallback","d","m","getMonth","y","getFullYear","setNewSelectedDate","process","env","NODE_ENV","console","warn","firstDayOfMonth","lastDayOfMonth","firstDayOfMonthWeekDay","lastDayOfMonthWeekDay","previousMonth","previousMonthLastDay","dates","i","push","getDatesOfMonth","map","dVal","key","toDateString","displayName","CustomOption","value","label","disabled","useRef","useEffect","current","scrollIntoView","CustomSelect","options","children","isOpen","setIsOpen","openOptionsDropdown","closeOptionsDropdown","handleOptionSelect","v","Children","toArray","some","c","clickListener","e","_ref$current","contains","target","addEventListener","removeEventListener","onFocus","alignTime","interval","lower","minutes","hours","greaterThan","a","b","isMinuteOptionDisabled","selectedTime","maxTime","minTime","MIN_TIME","MAX_TIME","TimePicker","minutesInterval","isInteger","undefined","getHours","getMinutes","setSelectedTime","handleMinutesChange","t","handleHoursChange","h","minuteOptions","useMemo","toString","padStart","hourOptions","updatedTime"],"mappings":"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"}