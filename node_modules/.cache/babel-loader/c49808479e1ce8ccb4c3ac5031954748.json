{"ast":null,"code":"var _jsxFileName = \"D:\\\\mk\\\\my-app\\\\my-app\\\\src\\\\components\\\\Map.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst _ = require(\"lodash\");\n\nconst {\n  compose,\n  withProps,\n  lifecycle\n} = require(\"recompose\");\n\nconst {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker\n} = require(\"react-google-maps\");\n\nconst {\n  SearchBox\n} = require(\"react-google-maps/lib/components/places/SearchBox\");\n\nconst MapWithASearchBox = compose(withProps({\n  googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyCXTkpYxVyKe1b4YEg2nwlszp1mme595ko&v=3.exp&libraries=geometry,drawing,places\",\n  loadingElement: /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: `100%`\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 21\n  }, this),\n  containerElement: /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: `400px`\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 23\n  }, this),\n  mapElement: /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: `100%`\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 17\n  }, this)\n}), lifecycle({\n  componentWillMount() {\n    const refs = {};\n    this.setState({\n      bounds: null,\n      center: {\n        lat: 41.9,\n        lng: -87.624\n      },\n      markers: [],\n      onMapMounted: ref => {\n        refs.map = ref;\n      },\n      onBoundsChanged: () => {\n        this.setState({\n          bounds: refs.map.getBounds(),\n          center: refs.map.getCenter()\n        });\n      },\n      onSearchBoxMounted: ref => {\n        refs.searchBox = ref;\n      },\n      onPlacesChanged: () => {\n        const places = refs.searchBox.getPlaces();\n        const bounds = new google.maps.LatLngBounds();\n        places.forEach(place => {\n          if (place.geometry.viewport) {\n            bounds.union(place.geometry.viewport);\n          } else {\n            bounds.extend(place.geometry.location);\n          }\n        });\n        const nextMarkers = places.map(place => ({\n          position: place.geometry.location\n        }));\n\n        const nextCenter = _.get(nextMarkers, '0.position', this.state.center);\n\n        this.setState({\n          center: nextCenter,\n          markers: nextMarkers\n        }); // refs.map.fitBounds(bounds);\n      }\n    });\n  }\n\n}), withScriptjs, withGoogleMap)(props => /*#__PURE__*/_jsxDEV(GoogleMap, {\n  ref: props.onMapMounted,\n  defaultZoom: 15,\n  center: props.center,\n  onBoundsChanged: props.onBoundsChanged,\n  children: [/*#__PURE__*/_jsxDEV(SearchBox, {\n    ref: props.onSearchBoxMounted,\n    bounds: props.bounds,\n    controlPosition: google.maps.ControlPosition.TOP_LEFT,\n    onPlacesChanged: props.onPlacesChanged,\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Customized your placeholder\",\n      style: {\n        boxSizing: `border-box`,\n        border: `1px solid transparent`,\n        width: `240px`,\n        height: `32px`,\n        marginTop: `27px`,\n        padding: `0 12px`,\n        borderRadius: `3px`,\n        boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\n        fontSize: `14px`,\n        outline: `none`,\n        textOverflow: `ellipses`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this), props.markers.map((marker, index) => /*#__PURE__*/_jsxDEV(Marker, {\n    position: marker.position\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 7\n  }, this))]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 68,\n  columnNumber: 3\n}, this));\n\n/*#__PURE__*/\n_jsxDEV(MapWithASearchBox, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 104,\n  columnNumber: 1\n}, this);","map":{"version":3,"sources":["D:/mk/my-app/my-app/src/components/Map.jsx"],"names":["_","require","compose","withProps","lifecycle","withScriptjs","withGoogleMap","GoogleMap","Marker","SearchBox","MapWithASearchBox","googleMapURL","loadingElement","height","containerElement","mapElement","componentWillMount","refs","setState","bounds","center","lat","lng","markers","onMapMounted","ref","map","onBoundsChanged","getBounds","getCenter","onSearchBoxMounted","searchBox","onPlacesChanged","places","getPlaces","google","maps","LatLngBounds","forEach","place","geometry","viewport","union","extend","location","nextMarkers","position","nextCenter","get","state","props","ControlPosition","TOP_LEFT","boxSizing","border","width","marginTop","padding","borderRadius","boxShadow","fontSize","outline","textOverflow","marker","index"],"mappings":"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","sourcesContent":["const _ = require(\"lodash\");\r\nconst { compose, withProps, lifecycle } = require(\"recompose\");\r\nconst {\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  Marker,\r\n} = require(\"react-google-maps\");\r\nconst { SearchBox } = require(\"react-google-maps/lib/components/places/SearchBox\");\r\n\r\nconst MapWithASearchBox = compose(\r\n  withProps({\r\n    googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyCXTkpYxVyKe1b4YEg2nwlszp1mme595ko&v=3.exp&libraries=geometry,drawing,places\",\r\n    loadingElement: <div style={{ height: `100%` }} />,\r\n    containerElement: <div style={{ height: `400px` }} />,\r\n    mapElement: <div style={{ height: `100%` }} />,\r\n  }),\r\n  lifecycle({\r\n    componentWillMount() {\r\n      const refs = {}\r\n\r\n      this.setState({\r\n        bounds: null,\r\n        center: {\r\n          lat: 41.9, lng: -87.624\r\n        },\r\n        markers: [],\r\n        onMapMounted: ref => {\r\n          refs.map = ref;\r\n        },\r\n        onBoundsChanged: () => {\r\n          this.setState({\r\n            bounds: refs.map.getBounds(),\r\n            center: refs.map.getCenter(),\r\n          })\r\n        },\r\n        onSearchBoxMounted: ref => {\r\n          refs.searchBox = ref;\r\n        },\r\n        onPlacesChanged: () => {\r\n          const places = refs.searchBox.getPlaces();\r\n          const bounds = new google.maps.LatLngBounds();\r\n\r\n          places.forEach(place => {\r\n            if (place.geometry.viewport) {\r\n              bounds.union(place.geometry.viewport)\r\n            } else {\r\n              bounds.extend(place.geometry.location)\r\n            }\r\n          });\r\n          const nextMarkers = places.map(place => ({\r\n            position: place.geometry.location,\r\n          }));\r\n          const nextCenter = _.get(nextMarkers, '0.position', this.state.center);\r\n\r\n          this.setState({\r\n            center: nextCenter,\r\n            markers: nextMarkers,\r\n          });\r\n          // refs.map.fitBounds(bounds);\r\n        },\r\n      })\r\n    },\r\n  }),\r\n  withScriptjs,\r\n  withGoogleMap\r\n)(props =>\r\n  <GoogleMap\r\n    ref={props.onMapMounted}\r\n    defaultZoom={15}\r\n    center={props.center}\r\n    onBoundsChanged={props.onBoundsChanged}\r\n  >\r\n    <SearchBox\r\n      ref={props.onSearchBoxMounted}\r\n      bounds={props.bounds}\r\n      controlPosition={google.maps.ControlPosition.TOP_LEFT}\r\n      onPlacesChanged={props.onPlacesChanged}\r\n    >\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Customized your placeholder\"\r\n        style={{\r\n          boxSizing: `border-box`,\r\n          border: `1px solid transparent`,\r\n          width: `240px`,\r\n          height: `32px`,\r\n          marginTop: `27px`,\r\n          padding: `0 12px`,\r\n          borderRadius: `3px`,\r\n          boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\r\n          fontSize: `14px`,\r\n          outline: `none`,\r\n          textOverflow: `ellipses`,\r\n        }}\r\n      />\r\n    </SearchBox>\r\n    {props.markers.map((marker, index) =>\r\n      <Marker key={index} position={marker.position} />\r\n    )}\r\n  </GoogleMap>\r\n);\r\n\r\n<MapWithASearchBox />"]},"metadata":{},"sourceType":"module"}