{"ast":null,"code":"/**\n * Acuity lib\n */\nvar AcuityScheduling = require('./AcuityScheduling');\n\nvar AcuitySchedulingOAuth = require('./AcuitySchedulingOAuth');\n\nvar querystring = require('querystring');\n\nvar crypto = require('crypto');\n\nvar acuity = {\n  basic: function basic(config) {\n    return new AcuityScheduling(config);\n  },\n  oauth: function oauth(config) {\n    return new AcuitySchedulingOAuth(config);\n  },\n  verifyMessageSignature: function verifyMessageSignature(secret, body, signature) {\n    if (!secret || typeof secret !== 'string') {\n      throw new Error('Verify the message signature using your API key as the secret.');\n    } // Get hash of message using shared secret:\n\n\n    var hasher = crypto.createHmac('sha256', secret);\n    hasher.update(body);\n    var hash = hasher.digest('base64'); // Compare hash to Acuity signature:\n\n    if (hash !== signature) {\n      throw new Error('This message was forged!');\n    }\n  },\n  bodyParserVerify: function bodyParserVerify(secret) {\n    return function (req, res, buf, encoding) {\n      var body = buf.toString();\n      var signature = req.headers['X-Acuity-Signature'.toLowerCase()];\n      acuity.verifyMessageSignature(secret, body, signature);\n    };\n  },\n\n  /**\n   * Generate embed code for $owner.\n   *\n   * @param {number} owner  The owner's id.\n   * @param {object} options  Additional options.\n   *\t- width  Iframe width\n   *\t- height  Iframe height\n   *\t- query  Query string arguments\n   */\n  getEmbedCode: function getEmbedCode(owner, options) {\n    options = Object.create(options || {});\n    options.height = options.height || '800';\n    options.width = options.width || '100%';\n    var query = options.query = options.query || {};\n    query.owner = query.owner || owner; // Encode options:\n\n    for (key in options) {\n      if (key === 'query') {\n        options[key] = querystring.stringify(options[key]);\n      } else {\n        options[key] = escape(options[key]);\n      }\n    }\n\n    return '' + '<iframe src=\"https://app.acuityscheduling.com/schedule.php?' + options.query + '\" width=\"' + options.width + '\" height=\"' + options.height + '\" frameBorder=\"0\"></iframe>' + '<script src=\"https://d3gxy7nm8y4yjr.cloudfront.net/js/embed.js\" type=\"text/javascript\"></script>';\n  }\n};\n/**\n * Escape HTML entities\n *\n * Escape function borrowed from Mustache.\n */\n\nvar enitites = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  \"/\": '&#x2F;'\n};\n\nfunction escape(s) {\n  return (s + '').replace(/[&<>\"'\\/]/g, function (c) {\n    return entities[c];\n  });\n}\n\nmodule.exports = acuity;","map":{"version":3,"sources":["F:/fortec-kuldeep/react-js/laundry/my-app/node_modules/acuityscheduling/src/index.js"],"names":["AcuityScheduling","require","AcuitySchedulingOAuth","querystring","crypto","acuity","basic","config","oauth","verifyMessageSignature","secret","body","signature","Error","hasher","createHmac","update","hash","digest","bodyParserVerify","req","res","buf","encoding","toString","headers","toLowerCase","getEmbedCode","owner","options","Object","create","height","width","query","key","stringify","escape","enitites","s","replace","c","entities","module","exports"],"mappings":"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","sourcesContent":["/**\n * Acuity lib\n */\n\nvar AcuityScheduling = require('./AcuityScheduling');\nvar AcuitySchedulingOAuth = require('./AcuitySchedulingOAuth');\nvar querystring = require('querystring');\nvar crypto = require('crypto');\n\nvar acuity = {\n\n  basic: function (config) {\n    return new AcuityScheduling(config);\n  },\n\n  oauth: function (config) {\n    return new AcuitySchedulingOAuth(config);\n  },\n\n  verifyMessageSignature: function (secret, body, signature) {\n\n    if (!secret || typeof secret !== 'string') {\n      throw new Error('Verify the message signature using your API key as the secret.');\n    }\n\n    // Get hash of message using shared secret:\n    var hasher = crypto.createHmac('sha256', secret);\n    hasher.update(body);\n    var hash = hasher.digest('base64');\n\n    // Compare hash to Acuity signature:\n    if (hash !== signature) {\n      throw new Error('This message was forged!');\n    }\n  },\n\n  bodyParserVerify: function (secret) {\n    return function (req, res, buf, encoding) {\n      var body = buf.toString();\n      var signature = req.headers['X-Acuity-Signature'.toLowerCase()];\n      acuity.verifyMessageSignature(secret, body, signature);\n    };\n  },\n\n  /**\n   * Generate embed code for $owner.\n   *\n   * @param {number} owner  The owner's id.\n   * @param {object} options  Additional options.\n   *\t- width  Iframe width\n   *\t- height  Iframe height\n   *\t- query  Query string arguments\n   */\n  getEmbedCode: function (owner, options) {\n\n    options = Object.create(options || {});\n    options.height  = options.height  || '800';\n    options.width   = options.width   || '100%';\n\n    var query = options.query   = options.query   || {};\n    query.owner = query.owner || owner;\n\n    // Encode options:\n    for (key in options) {\n      if (key === 'query') {\n        options[key] = querystring.stringify(options[key]);\n      } else {\n        options[key] = escape(options[key]);\n      }\n    }\n\n    return '' +\n      '<iframe src=\"https://app.acuityscheduling.com/schedule.php?'+options.query+'\" width=\"'+options.width+'\" height=\"'+options.height+'\" frameBorder=\"0\"></iframe>' +\n      '<script src=\"https://d3gxy7nm8y4yjr.cloudfront.net/js/embed.js\" type=\"text/javascript\"></script>';\n  }\n};\n\n/**\n * Escape HTML entities\n *\n * Escape function borrowed from Mustache.\n */\nvar enitites = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  \"/\": '&#x2F;'\n};\nfunction escape (s) {\n  return (s + '').replace(/[&<>\"'\\/]/g, function (c) {\n    return entities[c];\n  });\n}\n\nmodule.exports = acuity;\n"]},"metadata":{},"sourceType":"script"}