{"ast":null,"code":"var _jsxFileName = \"D:\\\\mk\\\\my-app\\\\my-app\\\\src\\\\components\\\\Autocomplete.jsx\";\n// Autocomplete.js\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  padding: 20px;\n  text-align:center;\n`;\n_c = Wrapper;\n\nclass AutoComplete extends Component {\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n\n    this.onPlaceChanged = function () {\n      let {\n        map,\n        addplace\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.props;\n\n      const place = _this.autoComplete.getPlace();\n\n      if (!place.geometry) return;\n\n      if (place.geometry.viewport) {\n        map.fitBounds(place.geometry.viewport);\n      } else {\n        map.setCenter(place.geometry.location);\n        map.setZoom(17);\n      }\n\n      addplace(place);\n\n      _this.searchInput.blur();\n    };\n\n    this.clearSearchBox = this.clearSearchBox.bind(this);\n  }\n\n  componentDidMount() {\n    let {\n      map,\n      mapApi\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n    const options = {\n      // restrict your search to a specific type of result\n      types: ['address'] // restrict your search to a specific country, or an array of countries\n      // componentRestrictions: { country: ['gb', 'us'] },\n\n    };\n    this.autoComplete = new mapApi.places.Autocomplete(this.searchInput, options);\n    this.autoComplete.addListener('place_changed', this.onPlaceChanged);\n    this.autoComplete.bindTo('bounds', map);\n  }\n\n  componentWillUnmount() {\n    let {\n      mapApi\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n    mapApi.event.clearInstanceListeners(this.searchInput);\n  }\n\n  clearSearchBox() {\n    this.searchInput.value = '';\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"search-input\",\n        ref: ref => {\n          this.searchInput = ref;\n        },\n        type: \"text\",\n        onFocus: this.clearSearchBox,\n        placeholder: \"Enter a location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default AutoComplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wrapper\");","map":{"version":3,"sources":["D:/mk/my-app/my-app/src/components/Autocomplete.jsx"],"names":["React","Component","styled","Wrapper","div","AutoComplete","constructor","props","onPlaceChanged","map","addplace","place","autoComplete","getPlace","geometry","viewport","fitBounds","setCenter","location","setZoom","searchInput","blur","clearSearchBox","bind","componentDidMount","mapApi","options","types","places","Autocomplete","addListener","bindTo","componentWillUnmount","event","clearInstanceListeners","value","render","ref"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AAEA,MAAMC,OAAO,GAAGD,MAAM,CAACE,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;KAAMD,O;;AASN,MAAME,YAAN,SAA2BJ,SAA3B,CAAqC;AACjCK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAAA;;AACf,UAAMA,KAAN,CADe;AAAA;;AAAA,SAwBnBC,cAxBmB,GAwBF,YAAoC;AAAA,UAAnC;AAAEC,QAAAA,GAAF;AAAOC,QAAAA;AAAP,OAAmC,uEAAf,KAAI,CAACH,KAAU;;AACjD,YAAMI,KAAK,GAAG,KAAI,CAACC,YAAL,CAAkBC,QAAlB,EAAd;;AAEA,UAAI,CAACF,KAAK,CAACG,QAAX,EAAqB;;AACrB,UAAIH,KAAK,CAACG,QAAN,CAAeC,QAAnB,EAA6B;AACzBN,QAAAA,GAAG,CAACO,SAAJ,CAAcL,KAAK,CAACG,QAAN,CAAeC,QAA7B;AACH,OAFD,MAEO;AACHN,QAAAA,GAAG,CAACQ,SAAJ,CAAcN,KAAK,CAACG,QAAN,CAAeI,QAA7B;AACAT,QAAAA,GAAG,CAACU,OAAJ,CAAY,EAAZ;AACH;;AAEDT,MAAAA,QAAQ,CAACC,KAAD,CAAR;;AACA,MAAA,KAAI,CAACS,WAAL,CAAiBC,IAAjB;AACH,KArCkB;;AAEf,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAtB;AACH;;AAEDC,EAAAA,iBAAiB,GAA+B;AAAA,QAA9B;AAAEf,MAAAA,GAAF;AAAOgB,MAAAA;AAAP,KAA8B,uEAAZ,KAAKlB,KAAO;AAC5C,UAAMmB,OAAO,GAAG;AACZ;AACAC,MAAAA,KAAK,EAAE,CAAC,SAAD,CAFK,CAGZ;AACA;;AAJY,KAAhB;AAMA,SAAKf,YAAL,GAAoB,IAAIa,MAAM,CAACG,MAAP,CAAcC,YAAlB,CAChB,KAAKT,WADW,EAEhBM,OAFgB,CAApB;AAIA,SAAKd,YAAL,CAAkBkB,WAAlB,CAA8B,eAA9B,EAA+C,KAAKtB,cAApD;AACA,SAAKI,YAAL,CAAkBmB,MAAlB,CAAyB,QAAzB,EAAmCtB,GAAnC;AACH;;AAEDuB,EAAAA,oBAAoB,GAA0B;AAAA,QAAzB;AAAEP,MAAAA;AAAF,KAAyB,uEAAZ,KAAKlB,KAAO;AAC1CkB,IAAAA,MAAM,CAACQ,KAAP,CAAaC,sBAAb,CAAoC,KAAKd,WAAzC;AACH;;AAiBDE,EAAAA,cAAc,GAAG;AACb,SAAKF,WAAL,CAAiBe,KAAjB,GAAyB,EAAzB;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,wBACI,QAAC,OAAD;AAAA,6BACI;AACI,QAAA,SAAS,EAAC,cADd;AAEI,QAAA,GAAG,EAAGC,GAAD,IAAS;AACV,eAAKjB,WAAL,GAAmBiB,GAAnB;AACH,SAJL;AAKI,QAAA,IAAI,EAAC,MALT;AAMI,QAAA,OAAO,EAAE,KAAKf,cANlB;AAOI,QAAA,WAAW,EAAC;AAPhB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAaH;;AA1DgC;;AA6DrC,eAAejB,YAAf","sourcesContent":["// Autocomplete.js\r\nimport React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  padding: 20px;\r\n  text-align:center;\r\n`;\r\n\r\nclass AutoComplete extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.clearSearchBox = this.clearSearchBox.bind(this);\r\n    }\r\n\r\n    componentDidMount({ map, mapApi } = this.props) {\r\n        const options = {\r\n            // restrict your search to a specific type of result\r\n            types: ['address'],\r\n            // restrict your search to a specific country, or an array of countries\r\n            // componentRestrictions: { country: ['gb', 'us'] },\r\n        };\r\n        this.autoComplete = new mapApi.places.Autocomplete(\r\n            this.searchInput,\r\n            options,\r\n        );\r\n        this.autoComplete.addListener('place_changed', this.onPlaceChanged);\r\n        this.autoComplete.bindTo('bounds', map);\r\n    }\r\n\r\n    componentWillUnmount({ mapApi } = this.props) {\r\n        mapApi.event.clearInstanceListeners(this.searchInput);\r\n    }\r\n\r\n    onPlaceChanged = ({ map, addplace } = this.props) => {\r\n        const place = this.autoComplete.getPlace();\r\n\r\n        if (!place.geometry) return;\r\n        if (place.geometry.viewport) {\r\n            map.fitBounds(place.geometry.viewport);\r\n        } else {\r\n            map.setCenter(place.geometry.location);\r\n            map.setZoom(17);\r\n        }\r\n\r\n        addplace(place);\r\n        this.searchInput.blur();\r\n    };\r\n\r\n    clearSearchBox() {\r\n        this.searchInput.value = '';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Wrapper>\r\n                <input\r\n                    className=\"search-input\"\r\n                    ref={(ref) => {\r\n                        this.searchInput = ref;\r\n                    }}\r\n                    type=\"text\"\r\n                    onFocus={this.clearSearchBox}\r\n                    placeholder=\"Enter a location\"\r\n                />\r\n            </Wrapper>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AutoComplete;"]},"metadata":{},"sourceType":"module"}