{"ast":null,"code":"var _jsxFileName = \"D:\\\\mk\\\\my-app\\\\my-app\\\\src\\\\components\\\\Map.jsx\";\n\n/*global google*/\nimport ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport { GoogleMap, StandaloneSearchBox, Marker } from \"@react-google-maps/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Map() {\n  const _ = require(\"lodash\");\n\n  const {\n    compose,\n    withProps,\n    lifecycle\n  } = require(\"recompose\");\n\n  const {\n    withScriptjs,\n    withGoogleMap,\n    GoogleMap,\n    Marker\n  } = require(\"react-google-maps\");\n\n  const {\n    SearchBox\n  } = require(\"react-google-maps/lib/components/places/SearchBox\");\n\n  const MapWithASearchBox = compose(withProps({\n    googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyCXTkpYxVyKe1b4YEg2nwlszp1mme595ko&v=3.exp&libraries=geometry,drawing,places\",\n    loadingElement: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: `100%`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 21\n    }, this),\n    containerElement: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: `400px`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 23\n    }, this),\n    mapElement: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: `100%`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 17\n    }, this)\n  }), lifecycle({\n    componentWillMount() {\n      const refs = {};\n      this.setState({\n        bounds: null,\n        center: {\n          lat: 41.9,\n          lng: -87.624\n        },\n        markers: [],\n        onMapMounted: ref => {\n          refs.map = ref;\n        },\n        onBoundsChanged: () => {\n          this.setState({\n            bounds: refs.map.getBounds(),\n            center: refs.map.getCenter()\n          });\n        },\n        onSearchBoxMounted: ref => {\n          refs.searchBox = ref;\n        },\n        onPlacesChanged: () => {\n          const places = refs.searchBox.getPlaces();\n          const bounds = new google.maps.LatLngBounds();\n          places.forEach(place => {\n            if (place.geometry.viewport) {\n              bounds.union(place.geometry.viewport);\n            } else {\n              bounds.extend(place.geometry.location);\n            }\n          });\n          const nextMarkers = places.map(place => ({\n            position: place.geometry.location\n          }));\n\n          const nextCenter = _.get(nextMarkers, '0.position', this.state.center);\n\n          this.setState({\n            center: nextCenter,\n            markers: nextMarkers\n          }); // refs.map.fitBounds(bounds);\n        }\n      });\n    }\n\n  }), withScriptjs, withGoogleMap)(props => /*#__PURE__*/_jsxDEV(GoogleMap, {\n    ref: props.onMapMounted,\n    defaultZoom: 15,\n    center: props.center,\n    onBoundsChanged: props.onBoundsChanged,\n    children: [/*#__PURE__*/_jsxDEV(SearchBox, {\n      ref: props.onSearchBoxMounted,\n      bounds: props.bounds,\n      controlPosition: google.maps.ControlPosition.TOP_LEFT,\n      onPlacesChanged: props.onPlacesChanged,\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Customized your placeholder\",\n        style: {\n          boxSizing: `border-box`,\n          border: `1px solid transparent`,\n          width: `240px`,\n          height: `32px`,\n          marginTop: `27px`,\n          padding: `0 12px`,\n          borderRadius: `3px`,\n          boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\n          fontSize: `14px`,\n          outline: `none`,\n          textOverflow: `ellipses`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }, this), props.markers.map((marker, index) => /*#__PURE__*/_jsxDEV(Marker, {\n      position: marker.position\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 3\n  }, this));\n\n  /*#__PURE__*/\n  _jsxDEV(MapWithASearchBox, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 1\n  }, this);\n}\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["D:/mk/my-app/my-app/src/components/Map.jsx"],"names":["ReactDOM","React","GoogleMap","StandaloneSearchBox","Marker","Map","_","require","compose","withProps","lifecycle","withScriptjs","withGoogleMap","SearchBox","MapWithASearchBox","googleMapURL","loadingElement","height","containerElement","mapElement","componentWillMount","refs","setState","bounds","center","lat","lng","markers","onMapMounted","ref","map","onBoundsChanged","getBounds","getCenter","onSearchBoxMounted","searchBox","onPlacesChanged","places","getPlaces","google","maps","LatLngBounds","forEach","place","geometry","viewport","union","extend","location","nextMarkers","position","nextCenter","get","state","props","ControlPosition","TOP_LEFT","boxSizing","border","width","marginTop","padding","borderRadius","boxShadow","fontSize","outline","textOverflow","marker","index"],"mappings":"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","sourcesContent":["/*global google*/\r\nimport ReactDOM from \"react-dom\";\r\nimport React from \"react\";\r\n\r\nimport { GoogleMap, StandaloneSearchBox, Marker } from \"@react-google-maps/api\";\r\n\r\nfunction Map() {\r\n  const _ = require(\"lodash\");\r\nconst { compose, withProps, lifecycle } = require(\"recompose\");\r\nconst {\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  Marker,\r\n} = require(\"react-google-maps\");\r\nconst { SearchBox } = require(\"react-google-maps/lib/components/places/SearchBox\");\r\n\r\nconst MapWithASearchBox = compose(\r\n  withProps({\r\n    googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyCXTkpYxVyKe1b4YEg2nwlszp1mme595ko&v=3.exp&libraries=geometry,drawing,places\",\r\n    loadingElement: <div style={{ height: `100%` }} />,\r\n    containerElement: <div style={{ height: `400px` }} />,\r\n    mapElement: <div style={{ height: `100%` }} />,\r\n  }),\r\n  lifecycle({\r\n    componentWillMount() {\r\n      const refs = {}\r\n\r\n      this.setState({\r\n        bounds: null,\r\n        center: {\r\n          lat: 41.9, lng: -87.624\r\n        },\r\n        markers: [],\r\n        onMapMounted: ref => {\r\n          refs.map = ref;\r\n        },\r\n        onBoundsChanged: () => {\r\n          this.setState({\r\n            bounds: refs.map.getBounds(),\r\n            center: refs.map.getCenter(),\r\n          })\r\n        },\r\n        onSearchBoxMounted: ref => {\r\n          refs.searchBox = ref;\r\n        },\r\n        onPlacesChanged: () => {\r\n          const places = refs.searchBox.getPlaces();\r\n          const bounds = new google.maps.LatLngBounds();\r\n\r\n          places.forEach(place => {\r\n            if (place.geometry.viewport) {\r\n              bounds.union(place.geometry.viewport)\r\n            } else {\r\n              bounds.extend(place.geometry.location)\r\n            }\r\n          });\r\n          const nextMarkers = places.map(place => ({\r\n            position: place.geometry.location,\r\n          }));\r\n          const nextCenter = _.get(nextMarkers, '0.position', this.state.center);\r\n\r\n          this.setState({\r\n            center: nextCenter,\r\n            markers: nextMarkers,\r\n          });\r\n          // refs.map.fitBounds(bounds);\r\n        },\r\n      })\r\n    },\r\n  }),\r\n  withScriptjs,\r\n  withGoogleMap\r\n)(props =>\r\n  <GoogleMap\r\n    ref={props.onMapMounted}\r\n    defaultZoom={15}\r\n    center={props.center}\r\n    onBoundsChanged={props.onBoundsChanged}\r\n  >\r\n    <SearchBox\r\n      ref={props.onSearchBoxMounted}\r\n      bounds={props.bounds}\r\n      controlPosition={google.maps.ControlPosition.TOP_LEFT}\r\n      onPlacesChanged={props.onPlacesChanged}\r\n    >\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Customized your placeholder\"\r\n        style={{\r\n          boxSizing: `border-box`,\r\n          border: `1px solid transparent`,\r\n          width: `240px`,\r\n          height: `32px`,\r\n          marginTop: `27px`,\r\n          padding: `0 12px`,\r\n          borderRadius: `3px`,\r\n          boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\r\n          fontSize: `14px`,\r\n          outline: `none`,\r\n          textOverflow: `ellipses`,\r\n        }}\r\n      />\r\n    </SearchBox>\r\n    {props.markers.map((marker, index) =>\r\n      <Marker key={index} position={marker.position} />\r\n    )}\r\n  </GoogleMap>\r\n);\r\n\r\n<MapWithASearchBox />\r\n}\r\n\r\nexport default Map;\r\n"]},"metadata":{},"sourceType":"module"}